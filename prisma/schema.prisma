// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Use exact field types for PostgreSQL
enum RiskLevel {
  None
  Low
  Medium
  High
  Critical
}

enum UserRole {
  Admin
  Editor
  User
}

model Company {
  id                   Int                    @id @default(autoincrement())
  name                 String                 @unique @db.VarChar(50)
  vulnerabilities      Vulnerability[]
  vulnerabilitySummary VulnerabilitySummary[]
  RiskSLA              RiskSLA[]
  users                User[]
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt

  @@index([name])
}

model Vulnerability {
  id              String    @id @default(ulid()) @db.VarChar(26)
  assetIp         String    @db.Text
  assetOS         String?   @db.Text
  port            Int?      @db.Integer
  protocol        String?   @db.Text
  title           String    @db.Text
  cveId           String[]  @db.Text
  description     String    @db.Text
  riskLevel       RiskLevel
  cvssScore       Float?    @db.DoublePrecision
  impact          String    @db.Text
  recommendations String    @db.Text
  references      String[]  @db.Text
  pluginOutput    String?   @db.Text
  uniqueHash      String    @unique @db.Text
  companyId       Int
  fileUploadDate  DateTime
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  company     Company                @relation(fields: [companyId], references: [id], onDelete: Cascade)
  quarterData VulnerabilityQuarter[]

  @@unique([companyId, uniqueHash])
  @@index([riskLevel, companyId])
  @@index([assetIp, companyId])
  @@index([title, companyId])
}

model VulnerabilityQuarter {
  id              String   @id @default(ulid()) @db.VarChar(26)
  vulnerabilityId String   @db.VarChar(26)
  quarter         String   @db.VarChar(8)
  isResolved      Boolean  @default(false)
  fileUploadDate  DateTime
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  vulnerability Vulnerability @relation(fields: [vulnerabilityId], references: [id], onDelete: Cascade)

  @@unique([vulnerabilityId, quarter])
  @@index([quarter, isResolved])
  @@index([vulnerabilityId, isResolved])
}

model VulnerabilitySummary {
  id                      String   @id @default(ulid()) @db.VarChar(26)
  companyId               Int
  quarter                 String
  osSummary               Json     @db.JsonB
  riskSummary             Json     @db.JsonB
  topDevices              Json     @db.JsonB
  resolvedCount           Int      @db.Integer
  unresolvedCount         Int      @db.Integer
  newCount                Int      @db.Integer
  totalCount              Int      @db.Integer
  uniqueAssetCount        Int?     @db.Integer
  assetChangeRate         Float?   @db.DoublePrecision
  vulnerabilityGrowthRate Float?   @db.DoublePrecision
  fileUploadDate          DateTime
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt

  company Company @relation(fields: [companyId], references: [id])

  @@unique([companyId, quarter])
  @@index([quarter])
}

model User {
  id        Int       @id @default(autoincrement())
  name      String    @db.VarChar(255)
  email     String    @unique @db.VarChar(255)
  password  String    @db.VarChar(255)
  role      UserRole  @default(User)
  companyId Int?
  lastLogin DateTime? @db.Timestamp(3)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  company Company? @relation(fields: [companyId], references: [id])

  @@index([email])
  @@index([companyId, role])
}

model RegisterToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique @db.VarChar(255)
  email     String   @unique @db.VarChar(255)
  companyId Int?
  expiresAt DateTime @db.Timestamp(3)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([token])
  @@index([expiresAt])
}

model RiskSLA {
  id        Int      @id @default(autoincrement())
  companyId Int
  riskLevel String
  sla       Int
  type      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  company Company @relation(fields: [companyId], references: [id])

  @@unique([companyId, riskLevel, type])
  @@index([companyId])
}
